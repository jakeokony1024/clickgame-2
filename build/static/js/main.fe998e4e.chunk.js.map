{"version":3,"sources":["components/Container/index.js","components/ImageCard/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","ImageCard","onClick","imageClick","id","alt","name","src","image","Title","correctGuesses","bestScore","clickMessage","App","state","friends","clickedFriend","filter","friend","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wxEAOeA,MAJf,SAAmBC,GACjB,OAAO,yBAAKC,UAAU,aAAaD,EAAME,W,MCgB1BC,MAjBjB,SAAmBH,GACf,OAQE,yBAAKI,QAAS,kBAAMJ,EAAMK,WAAWL,EAAMM,KAAKL,UAAU,iBAC5D,yBAAKA,UAAU,iBACd,yBAAKM,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,WCTvBC,G,MAFD,SAAAX,GAAK,OAAI,wBAAIC,UAAU,SAASD,EAAME,Y,OCKhDU,G,MAAiB,GACjBC,EAAY,EACZC,EAAe,sFAmIJC,E,4MA/HbC,MAAQ,CACNC,UACAL,iBACAC,YACAC,gB,EAEFT,WAAa,SAAAC,GAEX,IAAMW,EAAU,EAAKD,MAAMC,QACrBC,EAAgBD,EAAQE,QAAO,SAAAC,GAAM,OAAIA,EAAOd,KAAOA,KAE7D,GAAIY,EAAc,GAAGG,QAAS,CAE5BC,QAAQC,IAAK,oBAAsBX,GACnCU,QAAQC,IAAK,eAAiBV,GAE9BD,EAAiB,EACjBE,EAAe,2CAEf,IAAK,IAAIU,EAAI,EAAIA,EAAIP,EAAQQ,OAASD,IAClCP,EAAQO,GAAGH,SAAU,EAGzB,EAAKK,SAAS,CAACZ,iBACf,EAAKY,SAAS,CAAEd,mBAChB,EAAKc,SAAS,CAACT,iBAEZ,GAAIL,EAAiB,GAG1BM,EAAc,GAAGG,SAAU,EAG3BT,IAEAE,EAAe,wDAEXF,EAAiBC,IACjBA,EAAYD,EACZ,EAAKc,SAAS,CAAEb,eAIpBI,EAAQU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAG9C,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,qBACZ,CAELI,EAAc,GAAGG,SAAU,EAG3BT,EAAiB,EAGjBE,EAAe,uEACfD,EAAY,GACZ,EAAKa,SAAS,CAAEb,cAEhB,IAAK,IAAIW,EAAI,EAAIA,EAAIP,EAAQQ,OAASD,IAClCP,EAAQO,GAAGH,SAAU,EAIzBJ,EAAQU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAG9C,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,mB,uDAIL,IAAD,OACP,OACE,kBAAC,EAAD,KACI,kBAAC,EAAD,oBAEA,wBAAIb,UAAU,gBACT+B,KAAKhB,MAAMF,cAGhB,wBAAIb,UAAU,4BAAd,oBACsB+B,KAAKhB,MAAMJ,eAC7B,6BAFJ,eAGiBoB,KAAKhB,MAAMH,WAE5B,yBAAKZ,UAAU,aACf,yBAAKA,UAAU,OACdgB,EAAQgB,KAAI,SAAAb,GAAM,OACf,kBAAC,EAAD,CACIf,WAAY,EAAKA,WACjBC,GAAIc,EAAOd,GACX4B,IAAKd,EAAOd,GACZI,MAAOU,EAAOV,kB,GAlGdyB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.fe998e4e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Container;\n","import React from 'react';\nimport './style.css'\n\nfunction ImageCard(props) {\n    return (\n    //   <div className=\"card\">\n    //     <div className=\"img-container\">\n    //     <img alt={props.name} src={props.image} />\n    //     </div>\n    //     <span onClick={() => props.imageClick(props.id)} className=\"click\"></span>\n    //   </div>\n      \n      <div onClick={() => props.imageClick(props.id)} className=\"card col-md-3\">\n\t\t\t\t<div className=\"img-container\">\n\t\t\t\t\t<img alt={props.name} src={props.image} />\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n  \n  export default ImageCard;","import React from 'react';\nimport './style.css'\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React, { Component } from 'react';\nimport Container from './components/Container'\nimport ImageCard from './components/ImageCard'\n// import ImgContainer from './components/ImgContainer'\nimport Title from './components/Title'\nimport friends from './friends.json'\nimport './App.css';\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on a friend's image to gain points! Click on the same one twice and you lose!\";\n\nclass App extends Component {\n\n  state = {\n    friends,\n    correctGuesses,\n    bestScore,\n    clickMessage\n  }\n  imageClick = id => {\n\n    const friends = this.state.friends;\n    const clickedFriend = friends.filter(friend => friend.id === id);\n\n    if (clickedFriend[0].clicked) {\n\n      console.log (\"Correct Guesses: \" + correctGuesses);\n      console.log (\"Best Score: \" + bestScore);\n\n      correctGuesses = 0;\n      clickMessage = \"Bummer! You already clicked on this one.\"\n\n      for (let i = 0 ; i < friends.length ; i++) {\n          friends[i].clicked = false;\n      }\n\n      this.setState({clickMessage});\n      this.setState({ correctGuesses });\n      this.setState({friends});\n    \n  } else if (correctGuesses < 11) {\n\n    // Set its value to true\n    clickedFriend[0].clicked = true;\n\n    // increment the appropriate counter\n    correctGuesses++;\n    \n    clickMessage = \"Great! You haven't click on that one yet! Keep going!\";\n\n    if (correctGuesses > bestScore) {\n        bestScore = correctGuesses;\n        this.setState({ bestScore });\n    }\n\n    // Shuffle the array to be rendered in a random order\n    friends.sort(function(a, b){return 0.5 - Math.random()});\n\n    // Set this.state.friends equal to the new matches array\n    this.setState({ friends });\n    this.setState({correctGuesses});\n    this.setState({clickMessage});\n} else {\n  // Set its value to true\n  clickedFriend[0].clicked = true;\n\n  // restart the guess counter\n  correctGuesses = 0;\n\n  // Egg on the user to play again\n  clickMessage = \"WOW!!! You got ALL of them!!! Now, let's see if you can do it again!\";\n  bestScore = 12;\n  this.setState({ bestScore });\n  \n  for (let i = 0 ; i < friends.length ; i++){\n      friends[i].clicked = false;\n  }\n\n  // Shuffle the array to be rendered in a random order\n  friends.sort(function(a, b){return 0.5 - Math.random()});\n\n  // Set this.state.friends equal to the new matches array\n  this.setState({ friends });\n  this.setState({correctGuesses});\n  this.setState({clickMessage});\n\n}\n  }\n  render() {\n    return (\n      <Container>\n          <Title>Clicky Game</Title>\n  \n          <h3 className=\"scoreSummary\">\n              {this.state.clickMessage}\n          </h3>\n          \n          <h3 className=\"scoreSummary card-header\">\n              Correct Guesses: {this.state.correctGuesses} \n              <br />\n              Best Score: {this.state.bestScore} \n          </h3>\n          <div className=\"container\">\n          <div className=\"row\">\n          {friends.map(friend => (\n              <ImageCard\n                  imageClick={this.imageClick}\n                  id={friend.id}\n                  key={friend.id}\n                  image={friend.image}\n              />\n          ))}\n          </div>\n          </div>\n\n      </Container>\n  );\n  }\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}